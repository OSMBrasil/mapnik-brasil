/*
 * Base MapCSS
 *
 * To contain main rules (Sub-rules might be imported)
 */
meta {
	version:			"0.1";
	author:				"Aun Johnsen";
	description: 		"Mapnik for Brazil";
	min-pgmapcss-version: 0.10;
	min-josm-version:	7000;
}
 
/*
 * Background is sea
 */
@supports (user-agent: josm) {
    canvas {
        fill-color:			black;
        antialiasing:		full;
        fill-opacity:		0.1; /* Neutrilizes background in JOSM */
    }
}

/*
 * Fill color for land
 */
area[natural=coastline], relation[natural=coastline] {
	fill-color:			snow;
}
 
/*
 * Different base color for Federal and State highways
 */
way[highway]::highway {
	color:				darkgray;
	casing-color:		darkgray;
    dashes-background-color: darkgray; /* For JOSM */
	width:				1;
	casing-width:		2;
	set .highway;
}

/* Municipal highways can be part of network=BR:XX:* where XX is 2-letter code for state and * is any letter-combination to identify specific municipality
 * Also can use the same letter-combination in ref=, but creating a rule to capture this is complicated, as it can be any except BR or the 2-letter state
 * codes.
 *
 * Municipal highways should be overrided by state and federal highway, but have a different color than highways not fitting to any category.
 */
way[highway][network=~ /^BR:(AC|AL|AP|AM|BA|CE|DF|ES|GO|MA|MT|MS|MG|PA|PB|PE|PR|PI|RN|RJ|RO|RR|RS|SC|SP|SE|TO):.*/]::highway,
relation[type=route][route=road][network=~ /^BR:(AC|AL|AP|AM|BA|CE|DF|ES|GO|MA|MT|MS|MG|PA|PB|PE|PR|PI|RN|RJ|RO|RR|RS|SC|SP|SE|TO):.*/] > way[highway]::highway,
way[highway]["IBGE:CD_ADMINIS"=municipal]::highway,
way[highway]["IBGE:cd_adminis"=municipal]::highway,
relation[type=route][route=road]["IBGE:CD_ADMINIS"=municipal] > way[highway]::highway,
relation[type=route][route=road]["IBGE:cd_adminis"=municipal] > way[highway]::highway,
relation[type=route][route=road][ref=~ /^[A-Za-z]{2,4}((\/|-| )[A-Za-z]{2,4})?(-| )[0-9]{2,4}((\/|-| )[0-9]{2,4})?.*/][ref !~ /^(BR|MGC|RSC|AC|AL|AP|AM|BA|CE|DF|ES|GO|MA|MT|MS|(A|L)?MG|PA|PB|PE|PR(T)?|PI|RN|RJ|RO|RR|(E|V)?RS|SC|SP(M|A|D|I)?|SE|TO)(-| )[0-9]{3}.*/] > way[highway]::highway,
way[highway][ref=~ /^[A-Za-z]{2,4}((\/|-| )[A-Za-z]{2,4})?(-| )[0-9]{2,4}((\/|-| )[0-9]{2,4})?.*/][ref !~ /^(BR|MGC|RSC|AC|AL|AP|AM|BA|CE|DF|ES|GO|MA|MT|MS|(A|L)?MG|PA|PB|PE|PR(T)?|PI|RN|RJ|RO|RR|(E|V)?RS|SC|SP(M|A|D|I)?|SE|TO)(-| )[0-9]{3}.*/]::highway {
	color:				slateblue; /* Municipal Highway */
	casing-color:		slateblue;
    dashes-background-color: slateblue; /* For JOSM */
	width:				1;
	casing-width:		2;
	set .rodovia_municipal;
	set .highway;
}
 
way[highway]["IBGE:CD_ADMINIS"=estadual]::highway, way[highway]["IBGE:cd_adminis"=estadual]::highway,
way[highway][network="BR:AC"]::highway, relation[type=route][route=road][network="BR:AC"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^AC(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^AC(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:AL"]::highway, relation[type=route][route=road][network="BR:AL"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^AL(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^AL(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:AP"]::highway, relation[type=route][route=road][network="BR:AP"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^AP(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^AP(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:AM"]::highway, relation[type=route][route=road][network="BR:AM"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^AM(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^AM(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:BA"]::highway, relation[type=route][route=road][network="BR:BA"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^BA(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^BA(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:CE"]::highway, relation[type=route][route=road][network="BR:CE"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^CE(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^CE(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:DF"]::highway, relation[type=route][route=road][network="BR:DF"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^DF(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^DF(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:ES"]::highway, relation[type=route][route=road][network="BR:ES"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^ES(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^ES(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:GO"]::highway, relation[type=route][route=road][network="BR:GO"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^GO(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^GO(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:MA"]::highway, relation[type=route][route=road][network="BR:MA"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^MA(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^MA(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:MT"]::highway, relation[type=route][route=road][network="BR:MT"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^MT(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^MT(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:MS"]::highway, relation[type=route][route=road][network="BR:MS"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^MS(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^MS(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:MG"]::highway, relation[type=route][route=road][network="BR:MG"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^(A|L)?MG(C)?(-| )[0-9]{3,4}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^(A|L)?MG(C)?(-| )[0-9]{3,4}$/] > way[highway]::highway,
way[highway][network="BR:PA"]::highway, relation[type=route][route=road][network="BR:PA"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^PA(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^PA(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:PB"]::highway, relation[type=route][route=road][network="BR:PB"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^PB(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^PB(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:PR"]::highway, relation[type=route][route=road][network="BR:PR"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^PR(T)?(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^PR(T)?(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:PE"]::highway, relation[type=route][route=road][network="BR:PE"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^PE(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^PE(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:PI"]::highway, relation[type=route][route=road][network="BR:PI"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^PI(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^PI(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:RJ"]::highway, relation[type=route][route=road][network="BR:RJ"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^RJ(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^RJ(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:RN"]::highway, relation[type=route][route=road][network="BR:RN"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^RN(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^RN(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:RS"]::highway, relation[type=route][route=road][network="BR:RS"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^(E|V)?RS(C)?-.*/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^(E|V)?RS(C)?-.*/] > way[highway]::highway,
way[highway][network="BR:RO"]::highway, relation[type=route][route=road][network="BR:RO"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^RO(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^RO(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:RR"]::highway, relation[type=route][route=road][network="BR:RR"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^RR(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^RR(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:SC"]::highway, relation[type=route][route=road][network="BR:SC"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^SC(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^SC(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:SP"]::highway, relation[type=route][route=road][network="BR:SP"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^SP(M|A|D|I)?(-| )[0-9]{3}(\/[0-9]{3})? ?(D|E)?$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^SP(M|A|D|I)?(-| )[0-9]{3}(\/[0-9]{3})? ?(D|E)?$/] > way[highway]::highway,
way[highway][network="BR:SE"]::highway, relation[type=route][route=road][network="BR:SE"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^SE(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^SE(-| )[0-9]{3}$/] > way[highway]::highway,
way[highway][network="BR:TO"]::highway, relation[type=route][route=road][network="BR:TO"] > way[highway]::highway, way[highway][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^TO(-| )[0-9]{3}$/]::highway, relation[type=route][route=road][!"IBGE:CD_ADMINIS"][!"IBGE:cd_adminis"][ref=~/^TO(-| )[0-9]{3}$/] > way[highway]::highway {
	color:				darkgreen; /* State Highway */
	casing-color:		darkgreen;
    dashes-background-color: darkgreen; /* For JOSM */
    width:				1;
    casing-width:		2;
	set .rodovia_estadual;
	set .highway;
}

way[highway]["IBGE:CD_ADMINIS"=federal]::highway, way[highway]["IBGE:cd_adminis"=federal]::highway,
way[highway][network=BR]::highway, relation[type=route][route=road][network=BR] > way[highway]::highway,
relation[type=route][route=road][ref=~/^BR(-| )[0-9]{3}$/] > way[highway]::highway, way[highway][ref=~/^(BR|MGC|RSC)(-| )[0-9]{3}$/]::highway {
	color:				darkred; /* Federal Highway */
	casing-color:		darkred;
    dashes-background-color: darkred; /* For JOSM */
    width:				1;
    casing-width:		2;
	set .rodovia_federal;
	set .highway;
}

/*
* Where federal and state highway co-exists on the same way, combine the colors.
*/
way.rodovia_municipal.rodovia_federal::highway {
    color:              darkred;
    dashes-background-color:    slateblue; /* For JOSM */
    casing-color:       darkred;
    dashes:             5,5;
    width:				1;
    casing-width:		2;
    set .highway;
}
way.rodovia_municipal.rodovia_estadual::highway {
    color:              darkgreen;
    dashes-background-color:    slateblue; /* For JOSM */
    casing-color:       darkgreen;
    dashes:             5,5;
    width:				1;
    casing-width:		2;
    set .highway;
}
way.rodovia_federal.rodovia_estadual::highway {
/*relation[type=route][route=road][network=BR] > way.rodovia_estadual::highway, relation[type=route][route=road][ref=~/^BR(-| )[0-9]{3}$/] > way.rodovia_estadual::highway { */
	color:				darkred;
	dashes-background-color: darkred; /* For JOSM */
	casing-color:		darkgreen;
    width:				1;
    casing-width:		2;
	set .highway;
}
way.rodovia_federal.rodovia_municipal.rodovia_estadual::highway {
    color:				slateblue;
    dashes-background-color: darkred; /* For JOSM */
    casing-color:		darkgreen;
    width:				1;
    casing-width:		2;
    set .highway;
}

way|z5[highway][network].highway::highway, relation[route=road][network] > way.highway::highway {
	width:				4;
}
way|z3-5[highway].rodovia_estadual {
	width:				4;
}
way|z-5[highway].rodovia_federal {
	width:				4;
}

way|z-10[highway][surface=ground].highway::highway,
way|z-10[highway][surface=compacted].highway::highway,
way|z-10[highway][surface=dirt].highway::highway,
way|z-10[highway][surface=fine_gravel].highway::highway,
way|z-10[highway][surface=gravel].highway::highway,
way|z-10[highway][surface=earth].highway::highway,
way|z-10[highway][surface=mud].highway::highway,
way|z-10[highway][surface=grass].highway::highway,
way|z-10[highway][surface=clay].highway::highway,
way|z-10[highway][surface=pebbles].highway::highway,
way|z-10[highway][surface=sand].highway::highway,
way|z-10[highway][surface=scree].highway::highway,
way|z-10[highway][surface=unpaved].highway::highway {
	color:				white;
	dashes:				5,4;
	set	.highway;
}
way|z10-[highway][surface=ground].highway::highway,
way|z10-[highway][surface=compacted].highway::highway,
way|z10-[highway][surface=dirt].highway::highway,
way|z10-[highway][surface=fine_gravel].highway::highway,
way|z10-[highway][surface=gravel].highway::highway,
way|z10-[highway][surface=mud].highway::highway,
way|z10-[highway][surface=clay].highway::highway,
way|z10-[highway][surface=pebbles].highway::highway,
way|z10-[highway][surface=earth].highway::highway,
way|z10-[highway][surface=sand].highway::highway,
way|z10-[highway][surface=scree].highway::highway,
way|z10-[highway][surface=unpaved].highway::highway {
	color:				lightgray;
	dashes:				5,4;
	set .highway;
}
way|z10-[highway][surface=sett].highway::highway,
way|z10-[highway][surface=paving_stones].highway::highway,
way|z10-[highway][surface=pebblestone].highway::highway,
way|z10-[highway][surface=cobblestone].highway::highway {
	color:				brown;
	dashes:				5,4;
	set	.highway;
}
way|z10-[highway][surface=wood].highway::highway {
    color:				sandybrown;
    dashes:				5,4;
    set	.highway;
}
way|z10-[highway][surface=grass].highway::highway,
way|z10-[highway][surface=grass_paver].highway::highway {
    color:				green;
    dashes:				5,4;
    set	.highway;
}
way|z10-[highway][surface=metal].highway::highway {
    color:				lightgray;
    dashes:				5,4;
    set	.highway;
}

@supports (user-agent: josm) {
	way|z12-[highway][!surface].highway::highway {
		color:				lightgray;
		dashes:				3,2;
		dashes-background-color:	pink;
	}
}

way|z10-[highway=proposed].highway::highway,
way|z10-[highway=planned].highway::highway {
	color:				white;
	width:				1;
	dashes:				30,10,10,10;
	casing-dashes:		30,10,10,10;
}

way|z8-[highway=construction].highway::highway {
	color:				white;
	width:				2;
	dashes:				30,10;
	casing-dashes:		30,10;
}
@supports (user-agent: josm) {
	way|z8-[highway=road].highway::highway { 
		width:				2;
		dashes:				20,20;
		dashes-background-color:	red;
	}
}

way|z14-[highway=path].highway::highway {
	color:				green;
	casing-width:		1;
	casing-color:		brown;
	dashes:				6,4,4,4;
}
way|z14-[highway=steps].highway::highway,
way|z14-[highway=pedestrian].highway::highway,
way|z14-[highway=footway].highway::highway {
	color:				limegreen;
	casing-color:		limegreen;
	casing-width:		2;
}
way|z14-[highway][highway!=footway][footway?][!footway?!].highway::highway {
    dashes-background-color:    limegreen;
    dashes:             10,2;
}
way|z12-[highway=cycleway].highway::highway {
	color:				violet;
	casing-color:		violet;
	casing-width:		2;
}
way|z12-[highway][highway!=cycleway][cycleway][!cycleway?!].highway::highway {
    dashes-background-color:    violet;
    dashes:             8,3;
}
way|z12-[highway=bridleway].highway::highway,
way|z12-[highway=track].highway::highway {
	casing-width:		1;
	casing-color:		brown;
}
way|z12-[highway=bridleway].highway::highway,
way|z12-[highway=track][tracktype=grade1].highway::highway {
	dashes:				10,4,8,4;
}
way|z12-[highway=track][tracktype=grade2].highway::highway {
	dashes:				10,4,6,4;
}
way|z12-[highway=track][tracktype=grade3].highway::highway {
	dashes:				10,4,4,4;
}
way|z12-[highway=track][tracktype=grade4].highway::highway {
	dashes:				10,4,2,4;
}
way|z12-[highway=track][tracktype=grade5].highway::highway {
	dashes:				10,6,2,6;
}

way|z10-[highway=service].highway::highway,
way|z10-[highway=residential].highway::highway {
	width:				2;
}
area|z8-[highway=service][area?].highway:closed::highway {
    dashes:             none;
    fill-color:         darkgray;
    fill-opacity:       0.5;
}

way|z10-[highway=unclassified].highway::highway {
	width:				2;
}

way|z8-[highway=tertiary_link].highway::highway {
	width:				3;
}
way|z6-[highway=tertiary].highway::highway {
	width:				3;
}

way|z7-[highway=secondary_link].highway::highway {
	width:				4;
}
way|z6-[highway=secondary].highway::highway {
	width:				4;
}

way|z6-[highway=primary_link].highway::highway {
	width:				5;
}
way|z4-[highway=primary].highway::highway {
	width:				5;
}

way|z4-[highway=trunk_link].highway::highway {
	width:				3;
}
way|z3-[highway=trunk].highway::highway {
	width:				3;
	casing-width:		3;
}

way|z4-[highway=motorway_link].highway::highway {
	width:				3;
}
way|z2-[highway=motorway].highway::highway {
	width:				3;
	casing-width:		4;
/*	color:				white; */
}

relation[type=route][route=road] >[role=forward] way[highway][oneway?][!junction].highway::highway {
	left-casing-color:	white;
	left-casing-width:	5;
	left-casing-opacity: 0.9
}
relation[type=route][route=road] >[role=backward] way[highway][oneway=-1][!junction].highway::highway {
	right-casing-color:	white;
	right-casing-width:	5;
	right-casing-opacity: 0.9;
}

way[highway=raceway].highway::highway {
    width:              2;
    casing-width:       2;
    casing-color:       salmon;
    casing-opacity:     0.75;
}

way|z6-[highway][bridge][!bridge?!].highway::bridge {
    width:              5;
    casing-width:       5;
    casing-color:       black;
}
way|z6-[highway][tunnel][!tunnel?!].highway::tunnel {
    width:              5;
    casing-width:       5;
    casing-color:       darkgray;
}
way|z4-[highway][operator].highway::operator, relation[type=route][route=road][operator] > way[highway].highway::operator {
	/* Highway have concecionario, need to add a yellow halo to the road, in addition to the casing */
/*	object-z-index:		-1; */
	casing-width:		6;
	casing-color:		yellow;
}
way|z8-[higway][toll].highway::toll, relation[type=route][route=road][toll] > way[highway].highway::toll {
	/* Highway with toll fee to be rendered with a green halo on high zoom levels */
/*	object-z-index:		-2; */
	casing-width:		8;
	casing-color:		limegreen;
}

way|z8-[highway][noname?].highway::name, way[highway][unsigned?].highway::name, way[highway][unnamed?].highway::name {
	/* Unnamed highways render default "Sem Nome" */
	text:				eval("Sem Nome");
	text-halo-radius:	1;
	text-halo-color:	white;
	font-style:			italic;
	text-color:			gray;
}

relation[type=route][route=road] > way::name,
relation[type=route][route=street] > way::name {
	/* If unnamed way is part of a named road/street relation, take name from relation */
	text:				eval(any(parent_tag("name:pt"), parent_tag("name"), parent_tag("official_name"), parent_tag("alt_name"), parent_tag("loc_name"), parent_tag("old_name")));
	text-color:			black;
	text-halo-radius:	1;
	text-halo-color:	white;
}
relation[type=associatedStreet] >[role=street] way::name {
	/* If unnamed way is part of a named associatedStreet relation, take name from relation */
	text:				eval(any(parent_tag("name:pt"), parent_tag("name"), parent_tag("official_name"), parent_tag("alt_name"), parent_tag("loc_name"), parent_tag("old_name")));
	text-color:			black;
	text-halo-radius:	1;
	text-halo-color:	white;
}

way[highway].highway::name {
	/* Default names for highway is tagged on the way itself */
	text:				eval(any(tag("name:pt"), tag("name"), tag("official_name"), tag("alt_name"), tag("loc_name"), tag("old_name")));
	text-color:			black;
	text-halo-radius:	1;
	text-halo-color:	white;
}
/* To force correct use of name, and use of proper tags where the streets have no name */
way|z8-[highway][name=~/(?i).*rua projetada*/].highway::name,
way|z8-[highway][name=~/(?i).*sem denomina(c|ç)(a|ã)o*/].highway::name,
way|z8-[highway][name=~/^(?i)((via de )?acesso|entrada|entroncamento|rampa|retorno|rotat(ó|o)ria|r(ó|o)tula|sa(í|i)da|trevo|estrada( municipal| de terra)?|rua|rodovia|via)( (de acesso|sem nome|projetad(a|o)))?$/].highway::name,
way|z8-[highway][name=~/(?i)(rua|rodovia|estrada)?(sem nome|sem denomina(c|ç)(a|ã)o|projetad(a|o))$?/],
way|z8-[highway][name=~/(?i).*sem nome*/].highway::name {
	/* Any form of "Sem Nome" (un-named) should be overrided and printed in a different color, wrong use of name tag */
	text:				eval("Sem Nome");
	text-halo-radius:	1;
	text-halo-color:	white;
	font-style:			italic;
	text-color:			red;
}
way|z8-[bridge][!bridge?!]::name { /* tag bridge set, but not bridge=no */
	/* Name of the bridge instead of name of the highway, if set, to be printed on bridges */
	text:				eval(any(tag("bridge:name:pt"), tag("bridge_name:pt"), tag("bridge:name"), tag("bridge_name"), tag("bridge:official_name"), tag("bridge:alt_name"), tag("bridge:loc_name"), tag("bridge:old_name"), tag("official_name"), tag("name:pt"), tag("name"), tag("alt_name"), tag("loc_name"), tag("old_name")));
}
way|z8-[tunnel][!tunnel?!]::name { /* tag tunnel set, but not tunnel=no */
	/* Name of the tunnel instead of name of the highway, if set, to be printed on tunnels */
	text:				eval(any(tag("tunnel:name:pt"), tag("tunnel_name:pt"), tag("tunnel:name"), tag("tunnel_name"), tag("tunnel:official_name"), tag("tunnel:alt_name"), tag("tunnel:loc_name"), tag("tunnel:old_name"), tag("official_name"), tag("name:pt"), tag("name"), tag("alt_name"), tag("loc_name"), tag("old_name")));
}
/* Creating shields */
way[highway][ref].highway, relation[type=route][route=road][ref] > way[highway].highway {
	/* Default shield (Municipal highways) */
	shield-text:		eval(any(tag(ref), parent_tag(ref)));
	shield-image:		"icons/rendering/shield/default.svg";
}
way[highway][ref].rodovia_estadual, relation[type=route][route=road][ref] > way[highway].rodovia_estadual {
	/* State Highway Shields */
	shield-text:		eval(any(tag(ref), parent_tag(ref)));
	shield-image:		"icons/rendering/shield/state.svg";
}
way[highway][ref].rodivia_federal, relation[type=route][route=road][ref] > way[highway].rodoovia_federal {
	/* Federal Highway Shields */
	shield-text:		eval(any(tag(ref), parent_tag(ref)));
	shield-image:		"icons/rendering/shield/br.svg";
}


relation[type=enforcement][enforcement=maxweight] >[role=device] node {
	/* Weighing Station */
	icon-image:			"icons/vehicle/restriction/pesagem.svg";
	icon-width:			16;
    icon-opacity:       1.0;
}

node[amenity=police][name =~ /(?i).*rodoviaria*/] {
	/* Highway Police */
	icon-image:			"icons/service/policia_rodoviaria.svg";
	icon-width:			16;
}

area|z6-[barrier=toll_booth]:closed,
node|z6-[barrier=toll_booth] {
	/* Toll booth (pedagio) */
    z-index:            100;
	icon-image:			"icons/vehicle/pedagio.svg";
	icon-width:			12;
}
way[highway][toll=yes] {
    z-index:            -5;
    casing-width:       10;
    casing-color:       yellow;
    casing-opacity:     0.75;
}

/*
 * Ferry routes to render differently
 * Somehow somebody are tagging car ferrys with highway=ferry, IMO this is wrong, but I include it here to avoid
 * problems with highway rules
 */
way[route=ferry], way[highway=ferry], relation[route=ferry] > way {
	width:					1;
	casing-width:			0;
	dashes:					8,6;
	color:					cornflowerblue;
}

way|z12-[highway] > node[maxspeed] {
	icon-image:				eval(concat("icons/vehicle/restriction/speed/", tag(maxspeed), ".svg"));
	icon-height:			12;
}
way|z12-[highway][maxspeed][!oneway] >[index=1] node,
way|z12-[highway][maxspeed][oneway][oneway!=-1] >[index=1] node {
	icon-image:				eval(concat("icons/vehicle/restriction/speed/", parent_tag(maxspeed), ".svg"));
	icon-height:			12;
    z-index:                5;
}
way|z12-[highway][maxspeed][!oneway] >[index=-1] node,
way|z12-[highway][maxspeed][!oneway?] >[index=-1] node {
	icon-image:				eval(concat("icons/vehicle/restriction/speed/", parent_tag(maxspeed), ".svg"));
	icon-height:			12;
    z-index:                5;
}
way|z12-[highway]["maxspeed:forward"] >[index=1] node {
	icon-image:				eval(concat("icons/vehicle/restriction/speed/", parent_tag("maxspeed:forward"), ".svg"));
	icon-height:			12;
    z-index:                5;
}
way|z12-[highway]["maxspeed:backward"] >[index=-1] node {
	icon-image:				eval(concat("icons/vehicle/restriction/speed/", parent_tag("maxspeed:backward"), ".svg"));
	icon-height:			12;
    z-index:                5;
}
way[highway] > node|z10-[highway=stop] {
	icon-image:				"icons/vehicle/restriction/pare.svg";
	icon-height:			12;
}
way[highway] > node|z10-[highway=give_way] {
	icon-image:				"icons/vehicle/restriction/yeld.svg";
	icon-height:			12;
}
/*node|z10-[noexit=yes], should only mark when tagged as the end node of a way */
way[highway] > node|z10-[noexit=yes] {
	icon-image:				"icons/vehicle/no_exit.svg";
	icon-height:			12;
}
node|z10-[highway=traffic_signals] {
/* Traffic signal */
icon-image:			"icons/vehicle/semaforo.svg";
icon-width:			12;
z-index:            10;
}

/*
 * Railways
 */
*[railway] {
	width:				2;
	casing-width:		1;
	color:				darkslategray;
	casing-color:		darkslategray;
	dashes:				4,6;
	dashes-background-color: white; /* For JOSM */
	icon-height:		12; /* default icon size */
	set .railway;
}
node|z9-[railway=level_crossing].railway {
	icon-image:			"icons/vehicle/level_crossing.svg";
}
@supports (user-agent: josm) {
	area[railway=station]:closed,
    area[railway=platform]:closed,
	area[railway=roundhouse]:closed {
		dashes:				none;
	}
}

/*
 * Public Transport
 */
node[public_transport=stop_position][bus=yes]::public_transport,
node[public_transport=platform][bus=yes]::public_transport,
node[highway=platform]::public_transport,
node[highway=bus_stop]::public_transport {
    symbol-shape:       circle;
    symbol-size:        64;
    symbol-fill-color:  white;
    icon-image:         "icons/transport/bus_stop.svg";
    icon-height:        12;
    z-index:            25;
}
relation[type=route][route=bus] >[role="stop"] node::stop_label {
    z-index:        -1;
    width:          16;
    color:          red;
    opacity:        0.25;
    text-color:     red;
    font-size:      19;
    text:           eval(parent_tags(ref));
/*    text-offset-y:  16; */
}
way ∈ relation[type=route][route=bus]::way_lable {
    text-color:     red;
    font-size:      19;
    text:           eval(((parent_tags(ref))));
    text-position:  line;
    text-offset-y:  -16;
    text-offset-x:  -16;
}
relation[type=route][route=bus] > way::relation_underlay {
    z-index:        -1;
    width:          16;
    color:          cyan;
    opacity:        0.25;
    linecap:        none;
    text-color:     red;
    font-size:      19;
    text:           eval(((parent_tags(ref))));
    text-position:  line;
    text-offset-y:  16;
    text-offset-x:  16;
}

/*
 * Pipelines
 */
way[man_made=pipeline]::man_made {
    set .pipeline;
}
*[location=underground].pipeline::man_made {
    color:          brown;
    opacity:        0.2;
    casing-opacity: 0.2;
    width:          2;
    set .pipeline;
}
*[location=overground].pipeline::man_made {
    color:          brown;
    opacity:        0.8;
    casing-opacity: 0.8;
    width:          2;
    set .pipeline;
}
*[location=overhead].pipeline::man_made {
    color:          brown;
    dashes:         5,2;
    opacity:        1;
    casing-opacity: 1;
    width:          2;
    set .pipeline;
}
*[location=underwater].pipeline::man_made {
    color:          brown;
    dashes:         5,2;
    opacity:        0.2;
    casing-opacity: 0.2;
    width:          2;
    set .pipeline;
}
*[type=gas].pipeline::man_made,
*[substance=gas].pipeline::man_made {
    casing-color:       darkgray;
    casing-width:       1;
}
*[type=oil].pipeline::man_made,
*[substance=oil].pipeline::man_made {
    casing-color:       black;
    casing-width:       1;
}
*[type=water].pipeline::man_made,
*[substance=water].pipeline::man_made {
    casing-color:       blue;
    casing-width:       1;
}
*[type=sewer].pipeline::man_made,
*[substance=sewer].pipeline::man_made {
    casing-color:       brown;
    casing-width:       1;
}


/*
 * Boundaries
 */
/* Admin Level 8, municipio */
relation[type=boundary][boundary=administrative][admin_level=8] >[role=label] node::BOUNDARY,
relation[type=multipolygon][boundary=administrative][admin_level=8] >[role=label] node::BOUNDARY {
    text:                   eval(any(parent_tag("official_name"), parent_tag("pt:name"), parent_tag("name"), parent_tag("short_name")));
    text-color:             purple;
    font-size:              10;
    font-family:            "Serif";
}
relation[type=boundary][boundary=administrative][admin_level=8] > way::BOUNDARY,
relation[type=multipolygon][boundary=administrative][admin_level=8] > way::BOUNDARY {
    color:                  purple;
    width:                  2;
    dashes:                 4,8;
    text-color:             purple;
    text-position:          line;
    text-anchor-vertical:   below;
    text-offset:            4;
    font-size:              8;
    text:                   eval(any(parent_tag("pt:name"), parent_tag("name")));
}
/* Admin Level 4, estado */
relation[type=boundary][boundary=administrative][admin_level=4] >[role=label] node::BOUNDARY,
relation[type=multipolygon][boundary=administrative][admin_level=4] >[role=label] node::BOUNDARY {
    text:                   eval(any(parent_tag("official_name"), parent_tag("pt:name"), parent_tag("name"), parent_tag("short_name")));
    text-color:             purple;
    font-size:              14;
    font-family:            "Serif";
}
relation[type=boundary][boundary=administrative][admin_level=4] > way::BOUNDARY,
relation[type=multipolygon][boundary=administrative][admin_level=4] > way::BOUNDARY {
    color:                  purple;
    width:                  2;
    dashes:                 4,4;
    text-color:             purple;
    text-position:          line;
    text-anchor-vertical:   below;
    text-offset:            4;
    font-size:              8;
    text:                   eval(any(parent_tag("pt:name"), parent_tag("name")));
}
/* Admin Level 3, region */
relation[type=boundary][boundary=administrative][admin_level=3] > way::BOUNDARY,
relation[type=multipolygon][boundary=administrative][admin_level=3] > way::BOUNDARY {
    color:                  purple;
    width:                  2;
    dashes:                 4,3;
    text-color:             purple;
    text-position:          line;
    text-anchor-vertical:   below;
    text-offset:            4;
    font-size:              8;
    text:                   eval(any(parent_tag("pt:name"), parent_tag("name")));
}

/* Admin Level 2, nation */
relation[type=boundary][boundary=administrative][admin_level=2] >[role=label] node::BOUNDARY,
relation[type=multipolygon][boundary=administrative][admin_level=2] >[role=label] node::BOUNDARY {
    text:                   eval(any(parent_tag("official_name"), parent_tag("pt:name"), parent_tag("name"), parent_tag("short_name")));
    text-color:             purple;
    font-size:              16;
    font-family:            "Serif";
}
relation[type=boundary][boundary=administrative][admin_level=2] > way::BOUNDARY,
relation[type=multipolygon][boundary=administrative][admin_level=2] > way::BOUNDARY {
    color:                  purple;
    width:                  2;
    dashes:                 4,2;
    text-color:             purple;
    text-position:          line;
    text-anchor-vertical:   below;
    text-offset:            4;
    font-size:              10;
    text:                   eval(any(parent_tag("pt:name"), parent_tag("name")));
}


/*
 * Waterways and water-cover
 */
*[waterway]::WATERWAYS,
*[natural=water]::WATERWAYS,
*[landuse=reservoir]::WATERWAYS,
*[landuse=basin]::WATERWAYS {
	color:				darkblue;
	width:				4;
	set .waterway;
}
way[tunnel=culvert].waterway::WATERWAYS {
    opacity:            0.3;
    set .waterway;
}
way|z4-[waterway=river].waterway::WATERWAYS {
	width:				8;
}
way|z6-[waterway=canal].waterway::WATERWAYS {
	width:				6;
}
way|z8-[waterway=stream].waterway::WATERWAYS {
	width:				4;
}
way|z10-[waterway=ditch].waterway::WATERWAYS {
	width:				3;
}
way|z13-[waterway=drain].waterway::WATERWAYS {
	width:				2;
}

area[natural=water]:closed::WATERWAYS,
area[waterway=riverbank]:closed::WATERWAYS,
area[landuse=reservoir]:closed::WATERWAYS,
area[landuse=basin]:closed::WATERWAYS,
area[waterway=canal]:closed::WATERWAYS {
	fill-color:			skyblue;
}
/*
 * Wetland
 */
area|z4-[natural=wetland]:closed::landcover {
	/* Default fill */
	fill-image:			"icons/rendering/natural/alogado.svg";
    fill-image-height:  16; /* Does not work in JOSM */
}
/*
 * Woodland, bushes, etc.
 */
area|z8-[natural=wood]:closed::landcover,
area|z8-[landuse=forest]:closed::landcover,
area|z8-[landcover=trees]:closed::landcover {
	fill-color:			forestgreen;
}
area|z13-[natural=scrub]:closed::landcover {
	fill-color:			forestgreen;
	fill-opacity:		0.5;
}
 
/*
 * Other Landscape Features
 */
area|z13-[landuse=farm]:closed::landcover,
area|z13-[landuse=farmland]:closed::landcover,
area|z13-[landuse=meadow]:closed::landcover,
area|z13-[landuse=orchard]:closed::landcover {
	/* default farmland */
	fill-color:			cornsilk;
}
area|z13-[landuse=industrial]:closed::landuse {
	fill-color:			gray;
}

/*
 * Urban features
 */
area|z2-12[landuse=residential]:closed::urban {
	fill-color:			yellow;
}
area|z13-[landuse=residential]:closed::urban {
	fill-color:			lightgray;
}
area|z14-[landuse=comercial]:closed::urban {
    fill-color:         slategray;
}
area|z13-[landuse=retail]:closed::urban {
    fill-color:         lightslategray;
}
area|z8-[building]:closed::urban {
	fill-color:			darkgoldenrod;
    text:               eval(any(tag("addr:housename"), tag("addr:housenumber"), "S/N"));
    text-color:         gray;
    set .building;
}
*[!"addr:housename"][!"addr:housenumber"].building::urban {
    text-color:         red;
    text-halo-color:    white;
}

/*
 * Amenities
 */
node|z8-[amenity=fuel],
area|z8-[amenity=fuel]:closed {
	icon-image:			"icons/vehicle/fuel/fuel.svg";
	icon-height:		16;
	text:				auto;
	set .fuel;
}
/*
 * Different symbols for the major brands
 */
*[operator=~ /(?i).*BR$/].fuel,
*[brand=~ /(?i).*BR$/].fuel,
*[operator=~ /(?i).*Petrobr(a|á)s$/].fuel,
*[brand=~ /(?i).*Petrobr(a|á)s$/].fuel {
	icon-image:			"icons/vehicle/fuel/br.svg";
}
*[operator=~ /(?i).*Al(e|é|ê)$/].fuel,
*[brand=~ /(?i).*Al(e|é|ê)$/].fuel {
	icon-image:			"icons/vehicle/fuel/ale.svg";
}
*[operator=~ /(?i).*Shell$/].fuel,
*[brand=~ /(?i).*Shell$/].fuel {
	icon-image:			"icons/vehicle/fuel/shell.svg";
}
*[operator=~ /(?i).*Esso$/].fuel,
*[brand=~ /(?i).*Esso$/].fuel
*[operator=~ /(?i).*Exxon$/].fuel,
*[brand=~ /(?i).*Exxon$/].fuel {
	icon-image:			"icons/vehicle/fuel/esso.svg";
}
*[operator=~ /(?i).*Texaco$/].fuel,
*[brand=~ /(?i).*Texaco$/].fuel {
	icon-image:			"icons/vehicle/fuel/texaco.svg";
}
*[operator=~ /(?i).*Ipiranga$/].fuel,
*[brand=~ /(?i).*Ipiranga$/].fuel {
	icon-image:			"icons/vehicle/fuel/ipiranga.svg";
} /*
*[operator=~ /(?i).*Atl(a|â)ntica$/].fuel,
*[brand=~ /(?i).*Atl(a|â)ntica$/].fuel {
    icon-image:         "icons/vehicle/fuel/atlantico.svg";
} */

node|z15-[amenity=bank],
area|z15-[amenity=bank]:closed {
    icon-image:         "icons/money/bank.svg";
    icon-height:        16;
    text:               auto;
    set .bank;
}
/*
 * Different symbols for the major branches
 */
*[operator=~ /(?i).*(Banco )?HSBC$/].bank,
*[brand=~ /(?i).*(Banco )?HSBC$/].bank {
    icon-image:         "icons/money/bank/HSBC.svg";
}
*[operator=~ /(?i).*(Banco )?Santander$/].bank,
*[brand=~ /(?i).*(Banco )?Santander$/].bank {
    icon-image:         "icons/money/bank/santander.svg";
}
*[operator=~ /(?i).*Bradesco$/].bank,
*[brand=~ /(?i).*Bradesco$/].bank {
    icon-image:         "icons/money/bank/Bradesco.svg";
}
*[operator=~ /(?i).*Sicoob$/].bank,
*[brand=~ /(?i).*Sicoob$/].bank {
    icon-image:         "icons/money/bank/sicoob.svg";
}
*[operator=~ /(?i).*Banestes$/].bank,
*[brand=~ /(?i).*Banestes$/].bank {
    icon-image:         "icons/money/bank/Banestes.svg";
}
*[operator=~ /(?i).*BanRiSul$/].bank,
*[brand=~ /(?i).*BanRiSul$/].bank {
icon-image:         "icons/money/bank/Banrisul.svg";
}
*[operator=~ /(?i).*BNB$/].bank,
*[brand=~ /(?i).*BNB$/].bank,
*[operator=~ /(?i).*Banco do Nordeste$/].bank,
*[brand=~ /(?i).*Banco do Nordeste$/].bank {
icon-image:         "icons/money/bank/BNB.svg";
}
*[operator=~ /(?i).*(Banco )?Ita(u|ú)$/].bank,
*[brand=~ /(?i).*(Banco )?Ita(u|ú)$/].bank {
    icon-image:         "icons/money/bank/Itau.svg";
}
*[operator=~ /(?i).*CEF$/].bank,
*[brand=~ /(?i).CEF$/].bank,
*[operator=~ /(?i).*Caixa ?(Econ(o|ô)mica)? ?(Federal)?$/].bank,
*[brand=~ /(?i).*Caixa ?(Econ(o|ô)mica)? ?(Federal)?$/].bank {
    icon-image:         "icons/money/bank/caixa.svg";
}
*[operator=~ /(?i).*Citi ?(group|bank)?$/].bank,
*[brand=~ /(?i).*Citi ?(group|bank)?$/].bank {
    icon-image:         "icons/money/bank/Citibank.svg";
}
*[operator=~ /(?i).*Banco do Brasil$/].bank,
*[brand=~ /(?i).*Banco do Brasil$/].bank {
    icon-image:         "icons/money/bank/BB.svg";
}
*[operator=~ /(?i).*BASA$/].bank,
*[brand=~ /(?i).*BASA$/].bank,
*[operator=~ /(?i).*Banco ?da ?Amaz(o|ô)nia$/],
*[brand=~ /(?i).*Banco ?da ?Amaz(o|ô)nia$/] {
    icon-image:         "icons/money/bank/BASA.svg";
}
*[operator=~ /(?i).*(Banco )?BMG$/].bank,
*[brand=~ /(?i).*(Banco )?BMG$/].bank {
icon-image:         "icons/money/bank/BMG.svg";
}
*[operator=~ /(?i).*Credit Suisse$/].bank,
*[brand=~ /(?i).*Credit Suisse$/].bank {
icon-image:         "icons/money/bank/Credit_Suisse.svg";
}
*[operator=~ /(?i).*Deutsche Bank$/].bank,
*[brand=~ /(?i).*Deutsche Bank$/].bank {
icon-image:         "icons/money/bank/Deutsche_Bank.svg";
}


/* Pousada */
node|z15-[tourism=guest_house],
area|z15-[tourism=guest_house]:closed,
node|z15-[tourism=hostel],
area|z15-[tourism=hostel]:closed,
node|z15-[tourism=chalet],
area|z15-[tourism=chalet]:closed,
node|z15-[tourism=apartment],
area|z15-[tourism=apartment]:closed,
node|z15-[tourism=bed_and_breakfast],
area|z15-[tourism=bed_and_breakfast]:closed,
node|z15-[tourism=motel],
area|z15-[tourism=motel]:closed {
    icon-image:         "icons/accommodation/guest_house.svg";
    icon-height:        12;
}
/* Hotel */
node|z15-[tourism=hotel],
area|z15-[tourism=hotel]:closed {
    icon-image:         "icons/accommodation/hotel/hotel.svg";
    icon-height:        12;
}
/* Motel */
node|z15-[amenity=love_hotel],
area|z15-[amenity=love_hotel]:closed {
    icon-image:			"icons/accommodation/love_hotel.svg";
    icon-height:		12;
}
/* Restaurant */
node|z15-[amenity=fast_food],
area|z15-[amenity=fast_food]:closed {
    text:           auto;
    text-color:     black;
    set .fast_food;
}
node|z15-[amenity=restaurant],
area|z15-[amenity=restaurant]:closed {
    text:           auto;
    text-color:     black;
    set .restaurant;
}
*.restaurant, *.fast_food {
    icon-image:         "icons/food/restaurant.svg";
    icon-height:        12;
}
/* Restaurant by cousine */

/* Fastfood by brand */
*[brand=~ /(?i).*Burger ?King$/].fast_food {
    icon-image:         "icons/food/fastfood/burgerking.svg";
}
*[brand=~ /(?i).*McDonald('| )?s?$/].fast_food {
    icon-image:         "icons/food/fastfood/mcdonalds.svg";
}
*[brand=~ /(?i).*Subway(s)?$/].fast_food {
    icon-image:         "icons/food/fastfood/subway.svg";
}


/* hazards for test (might become a popup) */
node[hazard]::hazard {
    symbol-shape:     circle;
    symbol-size:    10;
    symbol-color:   red;
    color:      red;
    text:       eval("!");
    text-color: red;
    font-size:  12;
}
