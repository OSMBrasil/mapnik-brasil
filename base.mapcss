/*
 * Base MapCSS
 *
 * To contain main rules (Sub-rules might be imported)
 */
meta {
	version:			"0.1";
	author:				"Aun Johnsen";
	description: 		"Mapnik for Brazil";
	min-pgmapcss-version: 0.8;
	min-josm-version:	7000;
}
 
/*
 * Background is sea
 */
canvas {
	fill-color:			lightblue;
	antialiasing:		full;
	fill-opacity:		0.1; /* Neutrilizes background in JOSM */
}
 
/*
 * Fill color for land
 */
area[natural=coastline], relation[natural=coastline] {
	fill-color:			snow;
}
 
/*
 * Different base color for Federal and State highways
 */
way[highway]::highway {
	color:				darkgray;
	casing-color:		darkgray;
	width:				1;
	casing-width:		2;
	set .highway;
}

/* Municipal highways can be part of network=BR:XX:* where XX is 2-letter code for state and * is any letter-combination to identify specific municipality
 * Also can use the same letter-combination in ref=, but creating a rule to capture this is complicated, as it can be any except BR or the 2-letter state
 * codes.
 *
 * Municipal highways should be overrided by state and federal highway, but have a different color than highways not fitting to any category.
 */
way[highway][network^="BR:"]::highway,
relation[type=route][route=road][network^="BR:"] > way[highway]::highway,
way[highway]["IBGE:CD_ADMINIS"=municipal]::highway,
way[highway]["IBGE:cd_adminis"=municipal]::highway {
	color:				slateblue;
	casing-color:		slateblue;
	width:				1;
	casing-width:		2;
	set .rodovia_municipal;
	set .highway;
}
 
way[highway]["IBGE:CD_ADMINIS"=estadual]::highway, way[highway]["IBGE:cd_adminis"=estadual]::highway,
way[highway][network="BR:AC"]::highway, relation[type=route][route=road][network="BR:AC"] > way[highway]::highway, way[highway][ref^=AC-]::highway, relation[type=route][route=road][ref^=AC-] > way[highway]::highway,
way[highway][network="BR:AL"]::highway, relation[type=route][route=road][network="BR:AL"] > way[highway]::highway, way[highway][ref^=AL-]::highway, relation[type=route][route=road][ref^=AL-] > way[highway]::highway,
way[highway][network="BR:AP"]::highway, relation[type=route][route=road][network="BR:AP"] > way[highway]::highway, way[highway][ref^=AP-]::highway, relation[type=route][route=road][ref^=AP-] > way[highway]::highway,
way[highway][network="BR:AM"]::highway, relation[type=route][route=road][network="BR:AM"] > way[highway]::highway, way[highway][ref^=AM-]::highway, relation[type=route][route=road][ref^=AM-] > way[highway]::highway,
way[highway][network="BR:BA"]::highway, relation[type=route][route=road][network="BR:BA"] > way[highway]::highway, way[highway][ref^=BA-]::highway, relation[type=route][route=road][ref^=BA-] > way[highway]::highway,
way[highway][network="BR:CE"]::highway, relation[type=route][route=road][network="BR:CE"] > way[highway]::highway, way[highway][ref^=CE-]::highway, relation[type=route][route=road][ref^=CE-] > way[highway]::highway,
way[highway][network="BR:DF"]::highway, relation[type=route][route=road][network="BR:DF"] > way[highway]::highway, way[highway][ref^=DF-]::highway, relation[type=route][route=road][ref^=DF-] > way[highway]::highway,
way[highway][network="BR:ES"]::highway, relation[type=route][route=road][network="BR:ES"] > way[highway]::highway, way[highway][ref^=ES-]::highway, relation[type=route][route=road][ref^=ES-] > way[highway]::highway,
way[highway][network="BR:GO"]::highway, relation[type=route][route=road][network="BR:GO"] > way[highway]::highway, way[highway][ref^=GO-]::highway, relation[type=route][route=road][ref^=GO-] > way[highway]::highway,
way[highway][network="BR:MA"]::highway, relation[type=route][route=road][network="BR:MA"] > way[highway]::highway, way[highway][ref^=MA-]::highway, relation[type=route][route=road][ref^=MA-] > way[highway]::highway,
way[highway][network="BR:MT"]::highway, relation[type=route][route=road][network="BR:MT"] > way[highway]::highway, way[highway][ref^=MT-]::highway, relation[type=route][route=road][ref^=MT-] > way[highway]::highway,
way[highway][network="BR:MS"]::highway, relation[type=route][route=road][network="BR:MS"] > way[highway]::highway, way[highway][ref^=MS-]::highway, relation[type=route][route=road][ref^=MS-] > way[highway]::highway,
way[highway][network="BR:MG"]::highway, relation[type=route][route=road][network="BR:MG"] > way[highway]::highway, way[highway][ref^=MG-]::highway, relation[type=route][route=road][ref^=MG-] > way[highway]::highway,
way[highway][network="BR:PA"]::highway, relation[type=route][route=road][network="BR:PA"] > way[highway]::highway, way[highway][ref^=PA-]::highway, relation[type=route][route=road][ref^=PA-] > way[highway]::highway,
way[highway][network="BR:PB"]::highway, relation[type=route][route=road][network="BR:PB"] > way[highway]::highway, way[highway][ref^=PB-]::highway, relation[type=route][route=road][ref^=PB-] > way[highway]::highway,
way[highway][network="BR:PR"]::highway, relation[type=route][route=road][network="BR:PR"] > way[highway]::highway, way[highway][ref^=PR-]::highway, relation[type=route][route=road][ref^=PR-] > way[highway]::highway,
way[highway][network="BR:PE"]::highway, relation[type=route][route=road][network="BR:PE"] > way[highway]::highway, way[highway][ref^=PE-]::highway, relation[type=route][route=road][ref^=PE-] > way[highway]::highway,
way[highway][network="BR:PI"]::highway, relation[type=route][route=road][network="BR:PI"] > way[highway]::highway, way[highway][ref^=PI-]::highway, relation[type=route][route=road][ref^=PI-] > way[highway]::highway,
way[highway][network="BR:RJ"]::highway, relation[type=route][route=road][network="BR:RJ"] > way[highway]::highway, way[highway][ref^=RJ-]::highway, relation[type=route][route=road][ref^=RJ-] > way[highway]::highway,
way[highway][network="BR:RN"]::highway, relation[type=route][route=road][network="BR:RN"] > way[highway]::highway, way[highway][ref^=RN-]::highway, relation[type=route][route=road][ref^=RN-] > way[highway]::highway,
way[highway][network="BR:RS"]::highway, relation[type=route][route=road][network="BR:RS"] > way[highway]::highway, way[highway][ref^=RS-]::highway, relation[type=route][route=road][ref^=RS-] > way[highway]::highway,
way[highway][network="BR:RO"]::highway, relation[type=route][route=road][network="BR:RO"] > way[highway]::highway, way[highway][ref^=RO-]::highway, relation[type=route][route=road][ref^=RO-] > way[highway]::highway,
way[highway][network="BR:RR"]::highway, relation[type=route][route=road][network="BR:RR"] > way[highway]::highway, way[highway][ref^=RR-]::highway, relation[type=route][route=road][ref^=RR-] > way[highway]::highway,
way[highway][network="BR:SC"]::highway, relation[type=route][route=road][network="BR:SC"] > way[highway]::highway, way[highway][ref^=SC-]::highway, relation[type=route][route=road][ref^=SC-] > way[highway]::highway,
way[highway][network="BR:SP"]::highway, relation[type=route][route=road][network="BR:SP"] > way[highway]::highway, way[highway][ref^=SP-]::highway, relation[type=route][route=road][ref^=SP-] > way[highway]::highway,
way[highway][network="BR:SE"]::highway, relation[type=route][route=road][network="BR:SE"] > way[highway]::highway, way[highway][ref^=SE-]::highway, relation[type=route][route=road][ref^=SE-] > way[highway]::highway,
way[highway][network="BR:TO"]::highway, relation[type=route][route=road][network="BR:TO"] > way[highway]::highway, way[highway][ref^=TO-]::highway, relation[type=route][route=road][ref^=TO-] > way[highway]::highway {
	color:				darkgreen; /* State Highway */
	casing-color:		darkgreen;
	casing-width:		2;
	set .rodovia_estadual;
	set .highway;
}

way[highway]["IBGE:CD_ADMINIS"=federal]::highway, way[highway]["IBGE:cd_adminis"=federal]::highway,
way[highway][network=BR]::highway, relation[type=route][route=road][network=BR] > way[highway]::highway, relation[type=route][route=road][ref^=BR-] > way[highway]::highway, way[highway][ref^=BR-]::highway {
	color:				darkred; /* Federal Highway */
	casing-color:		darkred;
	casing-width:		2;
	set .rodovia_federal;
	set .highway;
}

/*
 * Where federal and state highway co-exists on the same way, combine the colors.
 */
relation[type=route][route=road][network=BR] > way.rodovia_estadual::highway, relation[type=route][route=road][ref^=BR-] > way.rodovia_estadual::highway {
	color:				darkred;
	dashes-background-color: darkred; /* For JOSM */
	casing-color:		darkgreen;
	casing-width:		2;
	set .highway;
}

/*
 * Setting default highway values where unset: surface, maxspeed, oneway, lanes
 */
@media (user-agent: pgmapcss) {
	/* highway=road to be treated as unclassified */
	way[highway][!"DNIT:Class"] {
		set "DNIT:Class"=unknown;
	}
	way[highway=road] {
		set highway=unclassified;
	}
	way[highway=motorway][oneway?!] {
		set highway=primary;
	}
	way[highway=motorway][maxspeed<80] {
		set highway=trunk;
	}
	/* Default surface */
	way[highway=tertiary][!surface], way[highway=tertiary_link][!surface], 
	way[highway=unclassified][!surface], way[highway=track][!surface] {
		set surface=unpaved;
	}
	way[highway=service][!surface], way[highway=residential][!surface],
	way[highway=secondary][!surface], way[highway=secondary_link][!surface],
	way[highway=primary][!surface], way[highway=primary_link][!surface],
	way[highway=trunk][!surface], way[highway=trunk_link][!surface],
	way[highway=motorway][!surface], way[highway=motorway_link][!surface] {
		set surface=paved;
	}
	/* Default oneway */
	way[highway=motorway][!oneway], way[highway=motorway_link][!oneway],
	way[highway=trunk][!oneway], way[highway=trunk_link][!oneway],
	way[highway=primary_link][!oneway] {
		set oneway=yes;
	}
	way[highway][!oneway] {
		set oneway=no;
	}
	/* Default lanes */
	way[highway][!lanes] {
		set lanes=2;
	}
	way[highway=motorway][oneway?][!lanes],
	way[highway=trunk][oneway?!][!lanes] {
		set lanes=3;
	}
	way[highway=motorway][oneway?!][!lanes] {
		set lanes=5;
	}
	way[highway=trunk][oneway?][!lanes] {
		set lanes=2;
	}
	way[highway=track][!lanes],
	way[highway=footway][!lanes],
	way[highway=cycleway][!lanes],
	way[highway=unclassified][oneway?][!lanes],
	way[highway=tertiary][oneway?][!lanes],
	way[highway=residential][oneway?][!lanes] {
		set lanes=1;
	}
	/* Default Maxspeed */
	way[highway=motorway][!maxspeed] {
		set maxspeed=110;
	}
	way[highway=trunk][!maxspeed], way[highway=primary][!maxspeed] {
		set maxspeed=80;
	}
	way[highway=secondary][!maxspeed], way[highway=tertiary][!maxspeed] {
		set maxspeed=60;
	}
	way[highway=unclassified][!maxspeed] {
		set maxspeed=50;
	}
	way[highway=residential][!maxspeed] {
		set maxspeed=40;
	}
	way[highway=track][!maxspeed] {
		set maxspeed=30;
	}
	way[highway=service][!maxspeed] {
		set maxspeed=20;
	}
	way[highway][surface=unpaved],way[highway][surface=ground],way[highway][surface=compacted],way[highway][surface=dirt],
	way[highway][surface=fine_gravel],way[highway][surface=gravel],way[highway][surface=mud],way[highway][surface=clay],
	way[highway][surface=pebbles],way[highway][surface=sand],way[highway][surface=scree] {
		set "DNIT:Surface"=unpaved;
	}
	way[highway][surface=paved],way[highway][surface=sett],way[highway][surface=grass_paver],way[highway][surface=metal],
	way[highway][surface=paving_stones],way[highway][surface=pebblestone],way[highway][surface=wood],way[highway][surface=cobblestone],
	way[highway][surface=asphalt],way[highway][surface=asfalt],way[highway][surface=concrete],way[highway][surface=tarmac] {
		set "DNIT:Surface"=paved;
	}
	way["DNIT:Surface"=unpaved][highway] {
		set "DNIT:Class"=IMP; /* Implantada */
	}
	way["DNIT:Surface"=unpaved][highway=unclassified],
	way["DNIT:Surface"=unpaved][highway=track] {
		set "DNIT:Class"=LEN; /* Leitão Natural */
	}
	way["DNIT:Surface"=paved][highway=track],
	way["DNIT:Surface"=paved][highway=unclassified],
	way["DNIT:Surface"=paved][highway=tertiary],
	way["DNIT:Surface"=paved][highway=tertiary_link] {
		set "DNIT:Class"=EOP; /* Em Pivementação */
	}
	way["DNIT:Surface"=paved][highway=secondary],
	way["DNIT:Surface"=paved][highway=secondary_link],
	way["DNIT:Surface"=paved][highway=primary],
	way["DNIT:Surface"=paved][highway=primary_link],
	way["DNIT:Surface"=paved][highway=trunk][oneway?!],
	way["DNIT:Surface"=paved][highway=trunk_link][oneway?!],
	way["DNIT:Surface"=paved][highway=motorway][oneway?!],
	way["DNIT:Surface"=paved][highway=motorway_link][oneway?!] {
		set "DNIT:Class"=PAV; /* Pimementada */
	}
	relation[route=road] >[role=forward] way[oneway?][!junction],
	relation[route=road] >[role=backward] way[oneway=-1][!junction],
	way["DNIT:Surface"=paved][highway=trunk][!oneway?!][!junction],
	way["DNIT:Surface"=paved][highway=trunk_link][!oneway?!][!junction],
	way["DNIT:Surface"=paved][highway=motorway][!oneway?!][!junction],
	way["DNIT:Surface"=paved][highway=motorway_link][!oneway?!][!junction] {
		set "DNIT:Class"=DUP; /* Duplicada */
	}
	way[highway=construction], way[highway][construction] {
		set "DNIT:Class"=EOI; /* Em Implatação */
	}
	way[highway][construction=primary], way[highway][construction=trunk], way[highway][construction=motorway] {
		set "DNIT:Class"=EOD; /* Em Duplicação */
	}
	way[highway=planned],
	way[highway=proposed] {
		set "DNIT:Class"=PLA; /* Planejado */
	}
}

way|z5[highway][network].highway::highway, relation[route=road][network] > way.highway::highway {
	width:				4;
}
way|z3-5[highway].rodovia_estadual {
	width:				4;
}
way|z-5[highway].rodovia_federal {
	width:				4;
}

way|z-10[highway][surface=ground].highway::highway,
way|z-10[highway][surface=compacted].highway::highway,
way|z-10[highway][surface=dirt].highway::highway,
way|z-10[highway][surface=fine_gravel].highway::highway,
way|z-10[highway][surface=gravel].highway::highway,
way|z-10[highway][surface=mud].highway::highway,
way|z-10[highway][surface=clay].highway::highway,
way|z-10[highway][surface=pebbles].highway::highway,
way|z-10[highway][surface=sand].highway::highway,
way|z-10[highway][surface=scree].highway::highway,
way|z-10[highway][surface=unpaved].highway::highway {
	color:				white;
	dashes:				5,2;
	set	.highway;
}
way|z10-[highway][surface=ground].highway::highway,
way|z10-[highway][surface=compacted].highway::highway,
way|z10-[highway][surface=dirt].highway::highway,
way|z10-[highway][surface=fine_gravel].highway::highway,
way|z10-[highway][surface=gravel].highway::highway,
way|z10-[highway][surface=mud].highway::highway,
way|z10-[highway][surface=clay].highway::highway,
way|z10-[highway][surface=pebbles].highway::highway,
way|z10-[highway][surface=sand].highway::highway,
way|z10-[highway][surface=scree].highway::highway,
way|z10-[highway][surface=unpaved].highway::highway {
	color:				lightgray;
	dashes:				5,2;
	set .highway;
}
way|z10-[highway][surface=sett].highway::highway,
way|z10-[highway][surface=grass_paver].highway::highway,
way|z10-[highway][surface=metal].highway::highway,
way|z10-[highway][surface=paving_stones].highway::highway,
way|z10-[highway][surface=pebblestone].highway::highway,
way|z10-[highway][surface=wood].highway::highway,
way|z10-[highway][surface=cobblestone].highway::highway {
	color:				brown;
	dashes:				5,2;
	set	.highway;
}

@media (user-agent: josm) {
	way|z12-[highway][!surface].highway::highway {
		color:				lightgray;
		dashes:				3,2;
		dashes-background-color:	pink;
	}
}

way|z10-[highway=proposed].highway::highway,
way|z10-[highway=planned].highway::highway {
	color:				white;
	width:				1;
	dashes:				30,10,10,10;
	casing-dashes:		30,10,10,10;
}

way|z8-[highway=construction].highway::highway {
	color:				white;
	width:				2;
	dashes:				30,10;
	casing-dashes:		30,10;
}
@media (user-agent: josm) {
	way|z8-[highway=road].highway::highway { 
		width:				2;
		dashes:				20,20;
		dashes-background-color:	red;
	}
}

way|z14-[highway=path].highway::highway {
	color:				green;
	casing-width:		1;
	casing-color:		brown;
	dashes:				6,4,4,4;
}
way|z14-[highway=footway].highway::highway {
	color:				limegreen;
	casing-color:		limegreen;
	casing-width:		2;
}
way|z12-[highway=cycleway].highway::highway {
	color:				violet;
	casing-color:		violet;
	casing-width:		2;
}
way|z12-[highway=track].highway::highway {
	casing-width:		1;
	casing-color:		brown;
}
way|z12-[highway=track][tracktype=grade1].highway::highway {
	dashes:				10,4,8,4;
}
way|z12-[highway=track][tracktype=grade2].highway::highway {
	dashes:				10,4,6,4;
}
way|z12-[highway=track][tracktype=grade3].highway::highway {
	dashes:				10,4,4,4;
}
way|z12-[highway=track][tracktype=grade4].highway::highway {
	dashes:				10,4,2,4;
}
way|z12-[highway=track][tracktype=grade5].highway::highway {
	dashes:				10,6,2,6;
}

way|z10-[highway=service].highway::highway,
way|z10-[highway=residential].highway::highway {
	width:				2;
}
area|z8-[highway=service][area?].highway:closed::highway {
    dashes:             none;
    fill-color:         darkgray;
    fill-opacity:       0.5;
}

way|z10-[highway=unclassified].highway::highway {
	width:				2;
}

way|z8-[highway=tertiary_link].highway::highway {
	width:				3;
}
way|z6-[highway=tertiary].highway::highway {
	width:				3;
}

way|z7-[highway=secondary_link].highway::highway {
	width:				4;
}
way|z6-[highway=secondary].highway::highway {
	width:				4;
}

way|z6-[highway=primary_link].highway::highway {
	width:				5;
}
way|z4-[highway=primary].highway::highway {
	width:				5;
}

way|z4-[highway=trunk_link].highway::highway {
	width:				3;
}
way|z3-[highway=trunk].highway::highway {
	width:				3;
	casing-width:		3;
}

way|z4-[highway=motorway_link].highway::highway {
	width:				3;
}
way|z2-[highway=motorway].highway::highway {
	width:				3;
	casing-width:		4;
/*	color:				white; */
}

relation[type=route][route=road] >[role=forward] way[highway][oneway?][!junction].highway::highway {
	left-casing-color:	white;
	left-casing-width:	5;
	left-casing-opacity: 0.9
}
relation[type=route][route=road] >[role=backward] way[highway][oneway=-1][!junction].highway::highway {
	right-casing-color:	white;
	right-casing-width:	5;
	right-casing-opacity: 0.9;
}

way[highway=raceway].highway::highway {
    width:              2;
    casing-width:       2;
    casing-color:       salmon;
    casing-opacity:     0.75;
}

/* High zoom levels should render the true width of the road */
@media (user-agent: pgmapcss) { 
	way|z18-[highway].highway::highway {
		width:				eval(any(tag(width), set_width_in_meters(3 * tag(lanes))));
		casing-width:		3;
	}
}

way|z4-[highway][operator].highway::operator, relation[type=route][route=road][operator] > way[highway].highway::operator {
	/* Highway have concecionario, need to add a yellow halo to the road, in addition to the casing */
	object-z-index:		-1;
	casing-width:		+4;
	casing-color:		yellow;
}
way|z8-[higway][toll].highway::toll, relation[type=route][route=road][toll] > way[highway].highway::toll {
	/* Highway with toll fee to be rendered with a green halo on high zoom levels */
	object-z-index:		-2;
	casing-width:		+5;
	casing-color:		limegreen;
}

way|z8-[highway][noname?].highway::name, way[highway][unsigned?].highway::name, way[highway][unnamed?].highway::name {
	/* Unnamed highways render default "Sem Nome" */
	text:				eval("Sem Nome");
	text-halo-radius:	1;
	text-halo-color:	white;
	font-style:			italic;
	text-color:			gray;
}

relation[type=route][route=road] > way::name,
relation[type=route][route=street] > way::name {
	/* If unnamed way is part of a named road/street relation, take name from relation */
	text:				eval(any(parent_tag("name:pt"), parent_tag("name"), parent_tag("official_name"), parent_tag("alt_name"), parent_tag("loc_name"), parent_tag("old_name")));
	text-color:			black;
	text-halo-radius:	1;
	text-halo-color:	white;
}
relation[type=associatedStreet] >[role=street] way::name {
	/* If unnamed way is part of a named associatedStreet relation, take name from relation */
	text:				eval(any(parent_tag("name:pt"), parent_tag("name"), parent_tag("official_name"), parent_tag("alt_name"), parent_tag("loc_name"), parent_tag("old_name")));
	text-color:			black;
	text-halo-radius:	1;
	text-halo-color:	white;
}

way[highway].highway::name {
	/* Default names for highway is tagged on the way itself */
	text:				eval(any(tag("name:pt"), tag("name"), tag("official_name"), tag("alt_name"), tag("loc_name"), tag("old_name")));
	text-color:			black;
	text-halo-radius:	1;
	text-halo-color:	white;
}
/* To force correct use of name, and use of proper tags where the streets have no name */
way|z8-[highway][name=~/(?i).*rua projetada*/].highway::name,
way|z8-[highway][name=~/(?i).*sem denomina(c|ç)(a|ã)o*/].highway::name,
way|z8-[highway][name=~/^(?i)((via de )?acesso|entrada|entroncamento|rampa|retorno|rotat(ó|o)ria|r(ó|o)tula|sa(í|i)da|trevo|estrada( municipal| de terra)?|rua|rodovia|via)( (de acesso|sem nome|projetad(a|o)))?$/].highway::name,
way|z8-[highway][name=~/(?i)(rua|rodovia|estrada)?(sem nome|sem denomina(c|ç)(a|ã)o|projetad(a|o))$?/],
way|z8-[highway][name=~/(?i).*sem nome*/].highway::name {
	/* Any form of "Sem Nome" (un-named) should be overrided and printed in a different color, wrong use of name tag */
	text:				eval("Sem Nome");
	text-halo-radius:	1;
	text-halo-color:	white;
	font-style:			italic;
	text-color:			red;
}
way|z8-[bridge][!bridge?!] { /* tag bridge set, but not bridge=no */
	/* Name of the bridge instead of name of the highway, if set, to be printed on bridges */
	text:				eval(any(tag("bridge_name:pt"), tag("bridge_name"), tag("official_name"), tag("name:pt"), tag("name"), tag("alt_name"), tag("loc_name"), tag("old_name")));
}
way|z8-[tunnel][!tunnel?!] { /* tag tunnel set, but not tunnel=no */
	/* Name of the tunnel instead of name of the highway, if set, to be printed on tunnels */
	text:				eval(any(tag("tunnel_name:pt"), tag("tunnel_name"), tag("official_name"), tag("name:pt"), tag("name"), tag("alt_name"), tag("loc_name"), tag("old_name")));
}
/* Creating shields */
way[highway][ref].highway, relation[type=route][route=road][ref] > way[highway].highway {
	/* Default shield (Municipal highways) */
	shield-text:		eval(any(tag(ref), parent_tag(ref)));
	shield-image:		"icons/rendering/shield/default.svg";
}
way[highway][ref].rodovia_estadual, relation[type=route][route=road][ref] > way[highway].rodovia_estadual {
	/* State Highway Shields */
	shield-text:		eval(any(tag(ref), parent_tag(ref)));
	shield-image:		"icons/rendering/shield/state.svg";
}
way[highway][ref].rodivia_federal, relation[type=route][route=road][ref] > way[highway].rodoovia_federal {
	/* Federal Highway Shields */
	shield-text:		eval(any(tag(ref), parent_tag(ref)));
	shield-image:		"icons/rendering/shield/br.svg";
}

relation[type=enfocement][enforcement=maxweight] >[role=device] node,
relation[type=enfocement][enforcement=maxweight] >[role=device] way {
	/* Weighing Station */
	icon-image:			"icons/vehicle/restriction/pesagem.svg";
	icon-width:			16;
    icon-opacity:       1.0;
}

node[amenity=police][name =~ /(?i).*rodoviaria*/] {
	/* Highway Police */
	icon-image:			"icons/service/policia_rodoviaria.svg";
	icon-width:			16;
}

area|z6-[barrier=toll_booth]:closed,
node|z6-[barrier=toll_booth] {
	/* Toll booth (pedagio) */
	icon-image:			"icons/vehicle/pedagio.svg";
	icon-width:			12;
}
@media (user-agent: pgmapcss) { 
	node[barrier=toll_booth] near[distance<100] {
		/* No render, override second booth if too close to other */
		icon-image:			"icons/void.svg";
		icon-width:			0;
		icon-height:		0;
		icon-opacity:		0.0;
	}
}

node|z10-[highway=traffic_signals] {
	/* Traffic signal */
	icon-image:			"icons/vehicle/semaforo.svg";
	icon-width:			12;
}
@media (user-agent: pgmapcss) {
	node[highway=traffic_signals] near[distance<20] {
		/* No render, override second traffic signal if too close to other */
		icon-image:			"icons/void.svg";
		icon-width:			0;
		icon-height:		0;
		icon-opacity:		0.0;
	}
}

/*
 * Ferry routes to render differently
 * Somehow somebody are tagging car ferrys with highway=ferry, IMO this is wrong, but I include it here to avoid
 * problems with highway rules
 */
way[route=ferry], way[highway=ferry], relation[route=ferry] > way {
	width:					1;
	casing-width:			0;
	dashes:					8,6;
	color:					cornflowerblue;
}

way|z12-[highway] > node[maxspeed] {
	icon-image:				eval(concat("icons/vehicle/restriction/speed/", tag(maxspeed), ".svg"));
	icon-height:			12;
}
way|z12-[highway][maxspeed][!oneway] >[index=1] node,
way|z12-[highway][maxspeed][oneway][oneway!=-1] >[index=1] node {
	icon-image:				eval(concat("icons/vehicle/restriction/speed/", parent_tag(maxspeed), ".svg"));
	icon-height:			12;
}
way|z12-[highway][maxspeed][!oneway] >[index=-1] node,
way|z12-[highway][maxspeed][!oneway?] >[index=-1] node {
	icon-image:				eval(concat("icons/vehicle/restriction/speed/", parent_tag(maxspeed), ".svg"));
	icon-height:			12;
}
way|z12-[highway]["maxspeed:forward"] >[index=1] node {
	icon-image:				eval(concat("icons/vehicle/restriction/speed/", parent_tag("maxspeed:forward"), ".svg"));
	icon-height:			12;
}
way|z12-[highway]["maxspeed:backward"] >[index=-1] node {
	icon-image:				eval(concat("icons/vehicle/restriction/speed/", parent_tag("maxspeed:backward"), ".svg"));
	icon-height:			12;
}
way[highway] > node|z10-[highway=stop] {
	icon-image:				"icons/vehicle/restriction/pare.svg";
	icon-height:			12;
}
way[highway] > node|z10-[highway=give_way] {
	icon-image:				"icons/vehicle/restriction/yeld.svg";
	icon-height:			12;
}
/*node|z10-[noexit=yes], should only mark when tagged as the end node of a way */
way[highway] > node|z10-[noexit=yes]{
	icon-image:				"icons/vehicle/no_exit.svg";
	icon-height:			12;
}

/*
 * Railways
 */
*[railway] {
	width:				2;
	casing-width:		1;
	color:				darkslategray;
	casing-color:		darkslategray;
	dashes:				4,6;
	dashes-background-color: white; /* For JOSM */
	icon-height:		12; /* default icon size */
	set .railway;
}
@media (user-agent: pgmapcss) {
	*[railway].railway {
		dashes:			none;
		set .railway;
	}
	*[railway].railway::dashes_overlay {
		dashes:			6,4;
		color:			white;
	}
}
node|z9-[railway=level_crossing].railway {
	icon-image:			"icons/vehicle/level_crossing.svg";
}
@media (user-agent: pgmapcss) {
    area[railway@=station;roundhouse]:closed::dashes_overlay {
		dashes:				none;
	}
} 
@media (user-agent: josm) {
	area[railway=station]:closed,
	area[railway=roundhouse]:closed {
		dashes:				none;
	}
}

/*
 * Waterways and water-cover
 */
*[waterway],
*[natural=water],
*[landuse=reservoir],
*[landuse=basin] {
	color:				darkblue;
	width:				4;
	set .waterway;
}
way|z4-[waterway=river].waterway {
	width:				8;
}
way|z6-[waterway=canal].waterway {
	width:				6;
}
way|z8-[waterway=stream].waterway {
	width:				4;
}
way|z10-[waterway=ditch].waterway {
	width:				3;
}
way|z13-[waterway=drain].waterway {
	width:				2;
}

area[natural=water]:closed,
area[waterway=riverbank]:closed,
area[landuse=reservoir]:closed,
area[landuse=basin]:closed,
area[waterway=canal]:closed {
	fill-color:			skyblue;
}
/*
 * Wetland
 */
area|z4-[natural=wetland]:closed {
	/* Default fill */
	fill-image:			"icons/rendering/natural/alogado.svg";
}
/*
 * Woodland, bushes, etc.
 */
 area|z8-[natural=wood]:closed, area|z8-[landuse=forest]:closed, area|z8-[landcover=trees]:closed {
	fill-color:			forestgreen;
 }
 area|z13-[natural=scrub]:closed {
	fill-color:			forestgreen;
	fill-opacity:		0.5;
 }
 
/*
 * Other Landscape Features
 */
area|z13-[landuse=farm]:closed,area|z13-[landuse=farmland]:closed,area|z13-[landuse=meadow]:closed,area|z13-[landuse=orchard]:closed {
	/* default farmland */
	fill-color:			cornsilk;
}
area|z13-[landuse=industrial]:closed {
	fill-color:			gray;
}

/*
 * Urban features
 */
area|z2-12[landuse=residential]:closed {
	fill-color:			yellow;
}
area|z13-[landuse=residential]:closed {
	fill-color:			lightgray;
}
area|z8-[building]:closed {
	fill-color:			orange;
}

/*
 * Amenities
 */
node|z8-[amenity=fuel], area|z8-[amenity=fuel]:closed {
	icon-image:			"icons/vehicle/fuel/fuel.svg";
	icon-height:		16;
	text:				auto;
	set .fuel;
}
/*
 * Different symbols for the major brands
  =~ /(?i).*Brand*
 */
*[operador=~ /(?i).*BR/].fuel,
*[brand=~ /(?i).*BR/].fuel,
*[operator=~ /(?i).*Petrobras/].fuel,
*[brand=~ /(?i).*Petrobras/].fuel {
	icon-image:			"icons/vehicle/fuel/br.svg";
}
*[operator=~ /(?i).*Al(e|é)/].fuel,
*[brand=~ /(?i).*Al(e|é)/].fuel {
	icon-image:			"icons/vehicle/fuel/ale.svg";
}
*[operator=~ /(?i).*Shell/].fuel,
*[brand=~ /(?i).*Shell/].fuel {
	icon-image:			"icons/vehicle/fuel/shell.svg";
}
*[operator=~ /(?i).*Esso/].fuel,
*[brand=~ /(?i).*Esso/].fuel {
	icon-image:			"icons/vehicle/fuel/esso.svg";
}
*[operator=~ /(?i).*Texaco/].fuel,
*[brand=~ /(?i).*Texaco/].fuel {
	icon-image:			"icons/vehicle/fuel/texaco.svg";
}
*[operator=~ /(?i).*Ipiranga/].fuel,
*[brand=~ /(?i).*Ipiranga/].fuel {
	icon-image:			"icons/vehicle/fuel/ipiranga.svg";
}

node|z15-[amenity=love_hotel], area|z15-[amenity=love_hotel]:closed {
	icon-image:			"icons/accommodation/love_hotel.svg";
	icon-height:		12;
}
